[buildout]
extensions = mr.developer
newest = false
parts = test
develop = .
extensions = mr.developer
auto-checkout = openprocurement_client
package-name = openprocurement.api

parts =
    scripts
    couchpy
    circus
    circusd
    circusctl
    circus.ini
    couchdb.ini
    openprocurement.api.ini
    reports_brokers_bridge
    reports_brokers_bridge.yaml
    shredder
eggs =
    chaussette
    pyramid
    request_id_middleware
    server_cookie_middleware
    ${:package-name}
find-links =
    http://op:x9W3jZ@dist.quintagroup.com/op/



[sources]
openprocurement_client = git https://github.com/openprocurement/openprocurement.client.python.git

[remotes]
gh = https://github.com/
gh_push = git@github.com:
opgh = ${remotes:gh}openprocurement/openprocurement
opgh_push = ${remotes:gh_push}openprocurement/openprocurement
itivan = ${remotes:gh}ITVaan/openprocurement

[sources]
openprocurement.api = git ${remotes:itivan}.api.git pushurl=${remotes:itivan}.api.git branch=production

[config-from-template]
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/${:_buildout_section_name_}
output = ${buildout:directory}/etc/${:_buildout_section_name_}

[scripts]
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
interpreter = python
scripts = chaussette


[reports_brokers_bridge]
recipe = zc.recipe.egg
eggs = reports.brokers [databridge]
scripts = reports_brokers_bridge

[circus]
recipe = zc.recipe.egg
eggs =
    circus
    circus-web
interpreter =
scripts =
    circusd-stats
    circus-top
    circus-plugin
    circushttpd

[couchpy]
<=circus
eggs = CouchDB
scripts =
    couchpy
    couchdb-replicate

[circusd]
<=circus
initialization =
    sys.argv[1:1] = ('${buildout:directory}/etc/circus.ini').split()
scripts = circusd

[circusctl]
<=circus
initialization =
    sys.argv[1:1] = ('--endpoint ${circus.ini:endpoint}').split()
scripts = circusctl

[circus.ini]
<= config-from-template
couchdb = True
statsd = True
webapp = True
edr_webapp = True
edr_web_port = 6547
edr_web_host = 0.0.0.0
web_port = 6543
web_host = 0.0.0.0
reports_brokers_bridge = True
endpoint = ipc://${buildout:directory}/var/circus_endpoint
pubsub_endpoint = ipc://${buildout:directory}/var/circus_pubsub
timezone = Europe/Kiev


[couchdb.ini]
<= config-from-template
port = 5984
host = 127.0.0.1
username =
password =

[openprocurement.api.ini]
<= config-from-template
couchdb_url = http://${couchdb.ini:host}:${couchdb.ini:port}/
couchdb_db = openprocurement
debug = false
auth_file = ${buildout:directory}/auth.ini
exc_logger = 1
dockeys = ba06dcf79331b6c0811f4e7ce86f9bdd0a113d803bed1ec60a7bc7a9bdfa2458


[reports_brokers_bridge.yaml]
<= config-from-template
tenders_api_server = http://0.0.0.0:6543
tenders_api_version = 2.3
public_tenders_api_server = http://0.0.0.0:6543
api_token = bot
proxy_server = http://127.0.0.1
proxy_user = robot
proxy_password = robot
proxy_port = 6547
proxy_version = 1.0
buffers_size = 500
full_stack_sync_delay = 15
empty_stack_sync_delay = 101
on_error_sleep_delay = 5
delay = 15
increment_step = 1
decrement_step = 1


[logrotate.conf]
<= config-from-template
logs_bucket =
logs_dir =
aws_access_key = ${openprocurement.api.ini:aws_access_key}
aws_secret_key = ${openprocurement.api.ini:aws_secret_key}

[logrotate-hourly]
recipe = z3c.recipe.usercrontab
times = @hourly
command = /usr/sbin/logrotate --state ${buildout:directory}/var/logrotate.status ${logrotate.conf:output} >>${buildout:directory}/var/log/logrotate.log 2>&1

[awscli]
recipe = zc.recipe.egg
scripts = aws

[autostart]
recipe = z3c.recipe.usercrontab
times = @reboot
command = ${buildout:directory}/bin/circusd --daemon --pidfile ${buildout:directory}/circus.pid

[shredder]
recipe = collective.recipe.template
inline =
    #!${buildout:bin-directory}/python
    from couchdb import Server
    from couchdb.design import ViewDefinition
    from openprocurement.api.models import get_now
    from datetime import timedelta
    aserver = Server('http://${couchdb.ini:username}:${couchdb.ini:password}@${couchdb.ini:host}:${couchdb.ini:port}/')
    adb = aserver['${openprocurement.api.ini:couchdb_db}']
    server = Server('${openprocurement.api.ini:couchdb_url}')
    db = server['${openprocurement.api.ini:couchdb_db}']
    shredder_view = ViewDefinition('shredder', 'tenders', "function(doc){if(doc.doc_type=='Tender' && doc.status=='draft'){emit(doc.dateModified, doc._rev)}}")
    ViewDefinition.sync_many(adb, [shredder_view])
    date = (get_now() - timedelta(7)).isoformat()
    tenders = []
    for i in shredder_view(db, endkey=date):
        tenders.append({'_id': i.id, '_rev': i.value, '_deleted': True})
    print db.update(tenders)
output = ${buildout:bin-directory}/${:_buildout_section_name_}
mode = 755
